<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
    
<mapper namespace="mapper.food">

	<!-- 지도 리스트 -->
	<select id="map_list" resultType="com.myjeju.vo.FoodVO">
		select f_vpoint, f_hpoint, f_name, f_addr, f_hp , f_image1 from myjeju_food
	</select>
	
	<!-- 음식점 전체 리스트 -->
	<select id="food_list" resultType="com.myjeju.vo.FoodVO">
		select rno, fid, f_name, f_tag, f_infor, f_infor2, f_addr, f_vpoint, f_hpoint, f_hp, f_like, f_file, f_sfile
  			from(select rownum rno, fid, f_name, f_tag, f_infor, f_infor2, f_addr, f_vpoint, f_hpoint, f_hp, f_like, f_file, f_sfile
    		from(select fid, f_name, f_tag, f_infor, f_infor2, f_addr, f_vpoint, f_hpoint, f_hp, f_like,  f_file, f_sfile
    		from myjeju_food order by f_like desc))
	</select>
	
	<!-- 음식점 리스트 처리 -->
	<select id="ajax_food_list_num" parameterType="map" resultType="com.myjeju.vo.FoodVO">
		select rno, fid, f_name, f_tag, f_infor, f_infor2, f_addr, f_vpoint, f_hpoint, f_hp, f_like,  f_file, f_sfile
			from(select rownum rno, fid, f_name, f_tag, f_infor, f_infor2, f_addr, f_vpoint, f_hpoint, f_hp, f_like, f_file, f_sfile
    		from(select fid, f_name, f_tag, f_infor, f_infor2, f_addr, f_vpoint, f_hpoint, f_hp, f_like,  f_file, f_sfile from myjeju_food order by f_like desc)) 
    		where rno between #{start} and #{end}
	</select>
	
	<!-- 음식점 리스트 검색 처리 -->
	<select id="ajax_food_list_search" parameterType="java.util.Map" resultType="com.myjeju.vo.FoodVO">
		<choose>
			<when test="search.equals('f_name')">
				select rno, fid, f_name, f_tag, f_infor, f_infor2, f_addr, f_vpoint, f_hpoint, f_hp, f_like,  f_file, f_sfile
					from(select rownum rno, fid, f_name, f_tag, f_infor, f_infor2, f_addr, f_vpoint, f_hpoint, f_hp, f_like,  f_file, f_sfile
	    			from(select fid, f_name, f_tag, f_infor, f_infor2, f_addr, f_vpoint, f_hpoint, f_hp, f_like,  f_file, f_sfile from myjeju_food order by f_like desc)
	    			where f_name like '%'||#{search_text}||'%') 
	    			where rno between #{start} and #{end}
			</when>
			<when test="search.equals('f_addr')">
				select rno, fid, f_name, f_tag, f_infor, f_infor2, f_addr, f_vpoint, f_hpoint, f_hp, f_like,  f_file, f_sfile
					from(select rownum rno, fid, f_name, f_tag, f_infor, f_infor2, f_addr, f_vpoint, f_hpoint, f_hp, f_like,  f_file, f_sfile
	    			from(select fid, f_name, f_tag, f_infor, f_infor2, f_addr, f_vpoint, f_hpoint, f_hp, f_like, f_file, f_sfile from myjeju_food order by f_like desc)
	    			where f_addr like '%'||#{search_text}||'%') 
	    			where rno between #{start} and #{end}
			</when>
		</choose>
	</select>
	
	<!-- 음식점 상위3 -->
	<select id="food_top3" resultType="com.myjeju.vo.FoodVO">
		<![CDATA[ select fid, f_name, f_tag, f_infor, f_like, f_file, f_sfile from 
				   (select fid, f_name, f_tag, f_infor, f_like,  f_file, f_sfile from myjeju_food order by f_like desc)
				   where rownum <= 3 ]]>
	</select>
	
	<!-- 음식점 상세 정보 -->
	<select id="food_detail" parameterType="java.lang.String" resultType="com.myjeju.vo.FoodVO">
		select fid, f_name, f_tag, f_infor, f_infor2, f_addr, f_hp, f_like,
			   f_file, f_sfile from myjeju_food where fid=#{fid}
	</select>
	
	
	<!-- 리뷰 쓰기 -->
	<insert id="insert_review" parameterType="com.myjeju.vo.FoodReviewVO">
		insert into myjeju_food_review values('re_'||sequ_myjeju_food_review.nextval, #{fid}, #{id}, #{f_review}, #{f_star}, sysdate)
	</insert>
	
	<!-- 리뷰 리스트 -->
	<select id="review_list" resultType="com.myjeju.vo.FoodReviewVO">
		select rno, reid, id, fid, f_review, f_star, f_time
 		 from(select rownum rno,  reid, id, fid, f_review, f_star, f_time
  		  from(select rownum rno,  reid, id, fid, f_review, f_star, to_char(f_time, 'yyyy-mm-dd') f_time
   		   from(select reid, id, fid, f_review, f_star, f_time from myjeju_food_review order by f_time) order by rno)
   		    order by rno desc) where fid=#{fid}
	</select>
	
	<!-- 리뷰 리스트 처리-->
	<select id="ajax_review_list" parameterType="map" resultType="com.myjeju.vo.FoodReviewVO">
		select rno, reid, id, fid, f_review, f_star, f_time
  		 from(select rownum rno, reid, id, fid, f_review, f_star, f_time
 		  from(select rownum rno,  reid, id, fid, f_review, f_star, f_time
  		   from(select rownum rno,  reid, id, fid, f_review, f_star, to_char(f_time, 'yyyy-mm-dd') f_time
   		    from(select reid, id, fid, f_review, f_star, f_time from myjeju_food_review order by f_time) order by rno)
   		     order by rno desc) where fid=#{fid}) where rno between #{start} and #{end}
	</select>
	
	<!-- 리뷰 삭제 -->
	<delete id="delete_review" parameterType="com.myjeju.vo.FoodReviewVO">
		delete from myjeju_food_review where reid = #{reid}
	</delete>
	
	
	<!-- 하트 테이블 + -->
	<insert id="heart_plus" parameterType="com.myjeju.vo.HeartVO">
		insert into myjeju_f_heart values(#{id}, #{fid})
	</insert>

	<!-- 하트 테이블 - -->
	<insert id="heart_minus" parameterType="com.myjeju.vo.HeartVO">
		delete from myjeju_f_heart where id=#{id} and fid=#{fid}
	</insert>
	
	<!-- 하트정보가져오기 -->
	<select id="hearrt_info_result" parameterType="com.myjeju.vo.HeartVO" resultType="java.lang.Integer">
		select count(*) from myjeju_f_heart where id=#{id} and fid=#{fid}
	</select>
	
	<!-- 음식점 테이블에 하트 추가 -->
	<update id="updateheart" parameterType="java.lang.String" >
		update myjeju_food set f_like = f_like+1 where fid=#{fid}
	</update>
	
	<!-- 음식점 테이블에 하트 마이너스 -->
	<update id="updateminusheart" parameterType="java.lang.String" >
		update myjeju_food set f_like = f_like-1 where fid=#{fid}
	</update>

</mapper>